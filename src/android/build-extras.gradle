/*
 * Copyright (c) 2017-2019 Onegini B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

android {
  dexOptions {
    preDexLibraries = false
    javaMaxHeapSize "4G"
  }

  packagingOptions {
    exclude 'META-INF/ASL2.0.txt'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
  }
}

allprojects {
  repositories {
    mavenLocal()
    mavenCentral()
    google()
    maven {
      url "https://repo.onegini.com/artifactory/onegini-sdk"
      credentials {
        def (artifactoryUser, artifactoryPassword) = getArtifactoryCredentials()
        if (artifactoryUser?.trim() && artifactoryPassword?.trim()) {
          username artifactoryUser
          password artifactoryPassword
        } else {
          throw new InvalidUserDataException("You must configure the 'ARTIFACTORY_USER' and 'ARTIFACTORY_PASSWORD' environment variables before you can " +
              "build the project.")
        }
      }
    }
    // The Jcenter repository is required for the Cordova framework dependency
    jcenter()
  }
}

dependencies {
  // TODO Move to release version before plugin release
  // Onegini SDK
  api('com.onegini.mobile.sdk.android:onegini-sdk:9.8.1@aar') {
    transitive = true
  }
}

afterEvaluate {
  tasks.matching {
    it.name.startsWith('dex')
  }.each { dx ->
    if (dx.additionalParameters == null) {
      dx.additionalParameters = ['--multi-dex']
    } else {
      dx.additionalParameters += '--multi-dex'
    }
  }
}

android {
  defaultConfig {
    multiDexEnabled true
  }
}

def getArtifactoryCredentials() {
  if (project.hasProperty('artifactory_user') && project.hasProperty('artifactory_password')) {
    return [artifactory_user, artifactory_password]
  } else if (System.env.ARTIFACTORY_USER && System.env.ARTIFACTORY_PASSWORD) {
    return [System.env.ARTIFACTORY_USER, System.env.ARTIFACTORY_PASSWORD]
  } else {
    def artifactoryFile = file("${project.rootDir}/artifactory.properties")
    if (artifactoryFile.exists()) {
      def props = new Properties()
      artifactoryFile.withInputStream { props.load(it) }
      return [props.getProperty("artifactoryUser"), props.getProperty("artifactoryPassword")]
    }
  }
  return ["", ""]
}
